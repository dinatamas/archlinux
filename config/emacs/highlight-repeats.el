(setq context-size 100)
(setq min-repeats 2)
(setq min-letters 4)

(setq repeat-hl-faces hi-lock-face-defaults)

(global-set-key (kbd "M-s r h") 'highlight-repeats)
(global-set-key (kbd "M-s r u") 'unhighlight-repeats)

(defun highlight-for-repeats (regexp face)
  (let* ((no-matches t)
         (search-start (point-min))
         (search-end (point-max)))
    (save-excursion
      (goto-char search-start)
      (while (re-search-forward regexp search-end t)
        (when no-matches (setq no-matches nil))
        (let ((overlay (make-overlay (match-beginning 0)
                                     (match-end 0))))
          (overlay-put overlay 'repeats t)
          (overlay-put overlay 'face face))
        (goto-char (match-end 0))))))

(defun highlight-repeats ()
  (interactive)
  (unhighlight-repeats)
  (setq begin (max (point-min) (- (window-start) context-size)))
  (setq end (min (point-max) (+ (window-end) context-size)))
  (setq curr-block (buffer-substring-no-properties begin end))
  (setq repeats (mapcar 'car (get-repeats curr-block)))
  (setq face-id 0)
  (dolist (rep repeats)
    (highlight-for-repeats
     (concat "\\<" rep "\\>")
     (nth face-id repeat-hl-faces))
    (setq face-id (mod (1+ face-id) (length repeat-hl-faces)))))

(defun unhighlight-repeats ()
  (interactive)
  (remove-overlays nil nil 'repeats t))

(defun count-each-word (l)
  (let ((tempList l)
        (occ 0)
        (result ()))
    (while (not (equal tempList ()))
      (setq occ (seq-count (lambda (m)
        (equal (downcase m) (downcase (car tempList)))) tempList))
      (setq result (cons (cons (downcase (car tempList))
        (cons occ ())) result))
      (setq tempList (cl-remove-if (lambda (m)
        (equal (downcase m) (downcase (car tempList)))) tempList)))
      (nreverse result)))

(defun get-repeats (str)
  (let ((filtered-inp (cl-remove-if
    (lambda (m) (< (string-width m) min-letters))
    (split-string str "[[:punct:][:digit:][:space:]\n]" t))))
  (cl-remove-if (lambda (k)
    (< (nth 1 k) min-repeats)) (count-each-word filtered-inp))))
